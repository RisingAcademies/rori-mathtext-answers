import os
from datetime import datetime
from logging import getLogger
from mathtext_fastapi.constants import SUPABASE_LINK

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship
from sqlalchemy import Column, Text, Integer, DateTime, ForeignKey
from sqlalchemy.dialects.postgresql import JSONB


log = getLogger(__name__)

engine = create_engine(SUPABASE_LINK)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()


def format_datetime_in_isoformat(dt):
    return getattr(dt.now(), 'isoformat', lambda x: None)()


class Project(Base):
    __tablename__ = "project"
    id = Column(Integer, primary_key=True, index=True)
    name = Column(Text)
    created_at = Column(DateTime(timezone=True))
    modified_at = Column(DateTime(timezone=True))


class Contact(Base):
    __tablename__ = "contact"
    id = Column(Integer, primary_key=True, index=True)
    project = Column(Integer, ForeignKey("project.id"))
    original_contact_id = Column(Text)
    urn = Column(Text)
    language_code = Column(Text)
    contact_inserted_at = Column(DateTime(timezone=True))
    # created_at = Column(DateTime(timezone=True))
    # modified_at = Column(DateTime(timezone=True))


class Message(Base):
    __tablename__ = "message"
    id = Column(Integer, primary_key=True, index=True)
    contact = Column(Integer, ForeignKey("contact.id"))
    original_message_id = Column(Text)
    text = Column(Text)
    direction = Column(Text)
    sender_type = Column(Text)
    channel_type = Column(Text)
    message_inserted_at = Column(DateTime(timezone=True))
    message_modified_at = Column(DateTime(timezone=True))
    message_sent_at = Column(DateTime(timezone=True))
    # created_at = Column(DateTime(timezone=True))
    # modified_at = Column(DateTime(timezone=True))
    nlu_response = Column(JSONB)
    request_object = Column(JSONB)


def get_or_create_record(table_name, insert_data, check_variable=None):
    # Query the database to check if the user exists
    try:
        session = SessionLocal()
        # session = create_database_session()
    except:
        log.error(f'Failed to create a database session: {table_name} : {insert_data}')
        return []

    record = None
    try:
        if table_name == 'project':
            record = session.query(Project).filter(Project.name == insert_data['name']).first()
        elif table_name == 'contact':
            record = session.query(Contact).filter(Contact.original_contact_id == insert_data['original_contact_id']).first()
        else:
            pass
    except Exception as e:
        log.error(f'Supabase entry retrieval failed: {table_name} : {insert_data}')
        return []

    # If the user exists, return the existing record
    if record:
        return record

    # If the user doesn't exist, create a new record
    if table_name == 'project':
        new_record = Project(**insert_data)
    elif table_name == 'contact':
        new_record = Contact(**insert_data)
    elif table_name == 'message':
        new_record = Message(**insert_data)
    session.add(new_record)
    session.commit()
    session.refresh(new_record)

    return new_record


def prepare_message_data_for_logging(message_data, nlu_response):
    """ Builds objects for each table and logs them to the database

    Input:
    - message_data: an object with the full message data from Turn.io/Whatsapp
    """
    project_data = {
        'name': "Rori",
        # Autogenerated fields: id, created_at, modified_at
    }
    project_data_log = get_or_create_record(
        'project',
        project_data,
        'name'
    )

    try:
        contact_data = {
            'project': project_data_log.id,  # FK
            'original_contact_id': message_data['contact_uuid'],
            'urn': "",
            'language_code': "en",
            'contact_inserted_at': format_datetime_in_isoformat(datetime.now())
            # Autogenerated fields: id, created_at, modified_at
        }
    except AttributeError:
        log.error(f'Build contact_data object for Supabase failed: {project_data_log} / {message_data}')
        return False

    contact_data_log = get_or_create_record('contact', contact_data)

    del message_data['author_id']

    try:
        message_data = {
            'contact': contact_data_log.id,  # FK
            'original_message_id': message_data['message_id'],
            'text': message_data['message_body'],
            'direction': message_data['message_direction'],
            'sender_type': message_data['author_type'],
            'channel_type': "whatsapp / turn.io",
            'message_inserted_at': message_data['message_inserted_at'],
            'message_modified_at': message_data['message_updated_at'],
            'message_sent_at': format_datetime_in_isoformat(datetime.now()),
            'nlu_response': nlu_response,
            'request_object': message_data
            # Autogenerated fields: created_at, modified_at
        }
    except AttributeError:
        log.error(f'Build message_data object for Supabase failed: {contact_data_log} / {message_data}')
        return False

    message_data_log = get_or_create_record('message', message_data)

